{"version":3,"sources":["../src/platform_node/grpc_connection.ts"],"names":[],"mappings":"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","file":"grpc_connection.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as grpc from 'grpc';\n\nimport firebase from '@firebase/app';\nconst SDK_VERSION = firebase.SDK_VERSION;\n\nconst grpcVersion = require('grpc/package.json').version;\n\nimport { Token } from '../api/credentials';\nimport { DatabaseInfo } from '../core/database_info';\nimport { Connection, Stream } from '../remote/connection';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { mapCodeFromRpcCode } from '../remote/rpc_error';\nimport { assert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { NodeCallback, nodePromise } from '../util/node_api';\nimport { Deferred } from '../util/promise';\n\nconst LOG_TAG = 'Connection';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = `gl-node/${\n  process.versions.node\n} fire/${SDK_VERSION} grpc/${grpcVersion}`;\n\ntype DuplexRpc<Req, Resp> = () => grpc.ClientDuplexStream<Req, Resp>;\ntype ReadableRpc<Req, Resp> = (req: Req) => grpc.ClientReadableStream<Resp>;\ntype UnaryRpc<Req, Resp> = (\n  req: Req,\n  callback: (err?: grpc.ServiceError, resp?: Resp) => void\n) => grpc.ClientUnaryCall;\n\nfunction createHeaders(databaseInfo: DatabaseInfo, token: Token | null): {} {\n  assert(\n    token === null || token.type === 'OAuth',\n    'If provided, token must be OAuth'\n  );\n\n  const channelCredentials = databaseInfo.ssl\n    ? grpc.credentials.createSsl()\n    : grpc.credentials.createInsecure();\n\n  const callCredentials = grpc.credentials.createFromMetadataGenerator(\n    (\n      context: { service_url: string },\n      cb: (error: Error | null, metadata?: grpc.Metadata) => void\n    ) => {\n      const metadata = new grpc.Metadata();\n      if (token) {\n        for (const header in token.authHeaders) {\n          if (token.authHeaders.hasOwnProperty(header)) {\n            metadata.set(header, token.authHeaders[header]);\n          }\n        }\n      }\n      metadata.set('x-goog-api-client', X_GOOG_API_CLIENT_VALUE);\n      // This header is used to improve routing and project isolation by the\n      // backend.\n      metadata.set(\n        'google-cloud-resource-prefix',\n        `projects/${databaseInfo.databaseId.projectId}/` +\n          `databases/${databaseInfo.databaseId.database}`\n      );\n      cb(null, metadata);\n    }\n  );\n\n  return grpc.credentials.combineChannelCredentials(\n    channelCredentials,\n    callCredentials\n  );\n}\n\n// The type of these stubs is dynamically generated by the GRPC runtime\n// from the protocol buffer.\n// tslint:disable-next-line:no-any\ntype GeneratedGrpcStub = any;\n\ninterface CachedStub {\n  stub: GeneratedGrpcStub;\n  token: Token | null;\n}\n\n/**\n * A Connection implemented by GRPC-Node.\n */\nexport class GrpcConnection implements Connection {\n  // tslint:disable-next-line:no-any\n  private firestore: any;\n\n  // We cache stubs for the most-recently-used token.\n  private cachedStub: CachedStub | null = null;\n\n  constructor(protos: grpc.GrpcObject, private databaseInfo: DatabaseInfo) {\n    this.firestore = protos['google']['firestore']['v1beta1'];\n  }\n\n  private sameToken(tokenA: Token | null, tokenB: Token | null): boolean {\n    const valueA = tokenA && tokenA.authHeaders['Authorization'];\n    const valueB = tokenB && tokenB.authHeaders['Authorization'];\n    return valueA === valueB;\n  }\n\n  private ensureActiveStub(token: Token | null): GeneratedGrpcStub {\n    if (!this.cachedStub || !this.sameToken(this.cachedStub.token, token)) {\n      log.debug(LOG_TAG, 'Creating Firestore stub.');\n      const credentials = createHeaders(this.databaseInfo, token);\n      this.cachedStub = {\n        stub: new this.firestore.Firestore(this.databaseInfo.host, credentials),\n        token\n      };\n    }\n\n    return this.cachedStub.stub;\n  }\n\n  private getRpcCallable<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): UnaryRpc<Req, Resp> | ReadableRpc<Req, Resp> | DuplexRpc<Req, Resp> {\n    // RPC Methods have the first character lower-cased\n    // (e.g. Listen => listen(), BatchGetDocuments => batchGetDocuments()).\n    const rpcMethod = rpcName.charAt(0).toLowerCase() + rpcName.slice(1);\n    const stub = this.ensureActiveStub(token);\n    const rpc = stub[rpcMethod];\n    assert(rpc != null, 'Unknown RPC: ' + rpcName);\n    return rpc.bind(stub);\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const rpc = this.getRpcCallable<Req, Resp>(rpcName, token) as UnaryRpc<\n      Req,\n      Resp\n    >;\n    return nodePromise((callback: NodeCallback<Resp>) => {\n      log.debug(LOG_TAG, `RPC '${rpcName}' invoked with request:`, request);\n      return rpc(request, (grpcError?: grpc.ServiceError, value?: Resp) => {\n        if (grpcError) {\n          log.debug(LOG_TAG, `RPC '${rpcName}' failed with error:`, grpcError);\n          callback(\n            new FirestoreError(\n              mapCodeFromRpcCode(grpcError.code),\n              grpcError.message\n            )\n          );\n        } else {\n          log.debug(\n            LOG_TAG,\n            `RPC '${rpcName}' completed with response:`,\n            value\n          );\n          callback(undefined, value);\n        }\n      });\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    const rpc = this.getRpcCallable(rpcName, token) as ReadableRpc<Req, Resp>;\n    const results = [];\n    const responseDeferred = new Deferred<Resp[]>();\n\n    log.debug(\n      LOG_TAG,\n      `RPC '${rpcName}' invoked (streaming) with request:`,\n      request\n    );\n    const stream = rpc(request);\n    stream.on('data', response => {\n      log.debug(LOG_TAG, `RPC ${rpcName} received result:`, response);\n      results.push(response);\n    });\n    stream.on('end', () => {\n      log.debug(LOG_TAG, `RPC '${rpcName}' completed.`);\n      responseDeferred.resolve(results);\n    });\n    stream.on('error', (grpcError: grpc.ServiceError) => {\n      log.debug(LOG_TAG, `RPC '${rpcName}' failed with error:`, grpcError);\n      const code = mapCodeFromRpcCode(grpcError.code);\n      responseDeferred.reject(new FirestoreError(code, grpcError.message));\n    });\n\n    return responseDeferred.promise;\n  }\n\n  // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const rpc = this.getRpcCallable(rpcName, token) as DuplexRpc<Req, Resp>;\n    const grpcStream = rpc();\n\n    let closed = false;\n    let close: (err?: Error) => void;\n\n    const stream = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          log.debug(LOG_TAG, 'GRPC stream sending:', msg);\n          try {\n            grpcStream.write(msg);\n          } catch (e) {\n            // This probably means we didn't conform to the proto.  Make sure to\n            // log the message we sent.\n            log.error('Failure sending:', msg);\n            log.error('Error:', e);\n            throw e;\n          }\n        } else {\n          log.debug(LOG_TAG, 'Not sending because gRPC stream is closed:', msg);\n        }\n      },\n      closeFn: () => {\n        log.debug(LOG_TAG, 'GRPC stream closed locally via close().');\n        close();\n      }\n    });\n\n    close = (err?: FirestoreError) => {\n      if (!closed) {\n        closed = true;\n        stream.callOnClose(err);\n        grpcStream.end();\n      }\n    };\n\n    grpcStream.on('data', (msg: Resp) => {\n      if (!closed) {\n        log.debug(LOG_TAG, 'GRPC stream received:', msg);\n        stream.callOnMessage(msg);\n      }\n    });\n\n    grpcStream.on('end', () => {\n      log.debug(LOG_TAG, 'GRPC stream ended.');\n      close();\n    });\n\n    grpcStream.on('finish', () => {\n      // TODO(mikelehen): I *believe* this assert is safe and we can just remove\n      // the 'finish' event if we don't see the assert getting hit for a while.\n      assert(closed, 'Received \"finish\" event without close() being called.');\n    });\n\n    grpcStream.on('error', (grpcError: grpc.ServiceError) => {\n      log.debug(\n        LOG_TAG,\n        'GRPC stream error. Code:',\n        grpcError.code,\n        'Message:',\n        grpcError.message\n      );\n      const code = mapCodeFromRpcCode(grpcError.code);\n      close(new FirestoreError(code, grpcError.message));\n    });\n\n    grpcStream.on('status', (status: grpc.StatusObject) => {\n      // TODO(mikelehen): I *believe* this assert is safe and we can just remove\n      // the 'status' event if we don't see the assert getting hit for a while.\n      assert(\n        closed,\n        `status event received before \"end\" or \"error\". ` +\n          `code: ${status.code} details: ${status.details}`\n      );\n    });\n\n    log.debug(LOG_TAG, 'Opening GRPC stream');\n    // TODO(dimond): Since grpc has no explicit open status (or does it?) we\n    // simulate an onOpen in the next loop after the stream had it's listeners\n    // registered\n    setTimeout(() => {\n      stream.callOnOpen();\n    }, 0);\n\n    return stream;\n  }\n}\n"]}