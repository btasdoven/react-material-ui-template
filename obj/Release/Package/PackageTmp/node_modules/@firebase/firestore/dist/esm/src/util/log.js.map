{"version":3,"sources":["../src/util/log.ts"],"names":[],"mappings":"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","file":"log.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\n\nimport { SDK_VERSION } from '../core/version';\nimport { AnyJs } from './misc';\nimport { PlatformSupport } from '../platform/platform';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/firestore');\n\nexport enum LogLevel {\n  DEBUG,\n  ERROR,\n  SILENT\n}\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  if (logClient.logLevel === FirebaseLogLevel.DEBUG) {\n    return LogLevel.DEBUG;\n  } else if (logClient.logLevel === FirebaseLogLevel.SILENT) {\n    return LogLevel.SILENT;\n  } else {\n    return LogLevel.ERROR;\n  }\n}\nexport function setLogLevel(newLevel: LogLevel): void {\n  /**\n   * Map the new log level to the associated Firebase Log Level\n   */\n  switch (newLevel) {\n    case LogLevel.DEBUG:\n      logClient.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case LogLevel.ERROR:\n      logClient.logLevel = FirebaseLogLevel.ERROR;\n      break;\n    case LogLevel.SILENT:\n      logClient.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      logClient.error(\n        `Firestore (${SDK_VERSION}): Invalid value passed to \\`setLogLevel\\``\n      );\n  }\n}\n\nexport function debug(tag: string, msg: string, ...obj: AnyJs[]): void {\n  if (logClient.logLevel <= FirebaseLogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}) [${tag}]: ${msg}`, ...args);\n  }\n}\n\nexport function error(msg: string, ...obj: AnyJs[]): void {\n  if (logClient.logLevel <= FirebaseLogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: AnyJs): string | AnyJs {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n"]}