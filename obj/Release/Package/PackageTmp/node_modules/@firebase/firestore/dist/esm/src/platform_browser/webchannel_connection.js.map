{"version":3,"sources":["../src/platform_browser/webchannel_connection.ts"],"names":[],"mappings":"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","file":"webchannel_connection.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  EventType,\n  WebChannel,\n  XhrIoPool,\n  createWebChannelTransport\n} from '@firebase/webchannel-wrapper';\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../core/version';\nimport { Connection, Stream } from '../remote/connection';\nimport {\n  mapCodeFromHttpStatus,\n  mapCodeFromRpcStatus\n} from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { Rejecter, Resolver } from '../util/promise';\nimport { StringMap } from '../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nconst RPC_URL_VERSION = 'v1beta1';\n\n/** Maps RPC names to the corresponding REST endpoint name. */\nconst RPC_NAME_REST_MAPPING = {\n  BatchGetDocuments: 'batchGet',\n  Commit: 'commit'\n};\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly pool: XhrIoPool;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    this.pool = new XhrIoPool();\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(headers: StringMap, token: Token | null) {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.\n      this.pool.getObject((xhr: any) => {\n        xhr.listenOnce(EventType.COMPLETE, () => {\n          try {\n            switch (xhr.getLastErrorCode()) {\n              case ErrorCode.NO_ERROR:\n                const json = xhr.getResponseJson() as Resp;\n                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                resolve(json);\n                break;\n              case ErrorCode.TIMEOUT:\n                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                reject(\n                  new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n                );\n                break;\n              case ErrorCode.HTTP_ERROR:\n                const status = xhr.getStatus();\n                log.debug(\n                  LOG_TAG,\n                  'RPC \"' + rpcName + '\" failed with status:',\n                  status,\n                  'response text:',\n                  xhr.getResponseText()\n                );\n                if (status > 0) {\n                  reject(\n                    new FirestoreError(\n                      mapCodeFromHttpStatus(status),\n                      'Server responded with status ' + xhr.getStatusText()\n                    )\n                  );\n                } else {\n                  // If we received an HTTP_ERROR but there's no status code,\n                  // it's most probably a connection issue\n                  log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                  reject(\n                    new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                  );\n                }\n                break;\n              default:\n                fail(\n                  'RPC \"' +\n                    rpcName +\n                    '\" failed with unanticipated ' +\n                    'webchannel error ' +\n                    xhr.getLastErrorCode() +\n                    ': ' +\n                    xhr.getLastError() +\n                    ', giving up.'\n                );\n            }\n          } finally {\n            log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n            this.pool.releaseObject(xhr);\n          }\n        });\n\n        const requestString = JSON.stringify(request);\n        log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the\n        // $httpOverwrite parameter supported by ESF to avoid\n        // triggering preflight requests.\n        const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n        this.modifyHeadersForRequest(headers, token);\n\n        xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n      });\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request = {\n      // Background channel test avoids the initial two test calls and decreases\n      // initial cold start time.\n      // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n      // we should monitor closely for any reports.\n      backgroundChannelTest: true,\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n      // preflight round-trip. This is formally defined here:\n      // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n      httpHeadersOverwriteParam: '$httpHeaders',\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${\n          this.databaseId.database\n        }`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true\n    };\n    this.modifyHeadersForRequest(request.initMessageHeaders, token);\n    const url = urlParts.join('');\n    log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    // tslint:disable-next-line:no-any Because listen isn't defined on it.\n    const channel = webchannelTransport.createWebChannel(url, request) as any;\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            log.debug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          log.debug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: WebChannel.EventType,\n      fn: (param?: T) => void\n    ) => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param?: T) => {\n        try {\n          fn(param);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        log.debug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        log.debug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    type WebChannelResponse = { data: Resp[] };\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg.data[0];\n          assert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          const error =\n            // tslint:disable-next-line:no-any msgData.error is not typed.\n            (msgData as any).error || (msgData[0] && msgData[0].error);\n          if (error) {\n            log.debug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            log.debug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n    const url = [this.baseUrl, '/', RPC_URL_VERSION];\n    url.push('/projects/');\n    url.push(this.databaseId.projectId);\n\n    url.push('/databases/');\n    url.push(this.databaseId.database);\n    url.push('/documents');\n\n    url.push(':');\n    url.push(urlRpcName);\n    return url.join('');\n  }\n}\n"]}