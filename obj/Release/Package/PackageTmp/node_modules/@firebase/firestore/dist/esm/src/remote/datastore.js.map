{"version":3,"sources":["../src/remote/datastore.ts"],"names":[],"mappings":"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","file":"datastore.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { CredentialsProvider } from '../api/credentials';\nimport { maybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport { assert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\n\nimport { Connection } from './connection';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { JsonProtoSerializer } from './serializer';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface BatchGetDocumentsRequest extends api.BatchGetDocumentsRequest {\n  database?: string;\n}\ninterface CommitRequest extends api.CommitRequest {\n  database?: string;\n}\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nexport class Datastore {\n  constructor(\n    private queue: AsyncQueue,\n    private connection: Connection,\n    private credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer\n  ) {}\n\n  newPersistentWriteStream(): PersistentWriteStream {\n    return new PersistentWriteStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer\n    );\n  }\n\n  newPersistentWatchStream(): PersistentListenStream {\n    return new PersistentListenStream(\n      this.queue,\n      this.connection,\n      this.credentials,\n      this.serializer\n    );\n  }\n\n  commit(mutations: Mutation[]): Promise<MutationResult[]> {\n    const params: CommitRequest = {\n      database: this.serializer.encodedDatabaseId,\n      writes: mutations.map(m => this.serializer.toMutation(m))\n    };\n    return this.invokeRPC<CommitRequest, api.CommitResponse>(\n      'Commit',\n      params\n    ).then(response => {\n      return this.serializer.fromWriteResults(response.writeResults);\n    });\n  }\n\n  lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    const params: BatchGetDocumentsRequest = {\n      database: this.serializer.encodedDatabaseId,\n      documents: keys.map(k => this.serializer.toName(k))\n    };\n    return this.invokeStreamingRPC<\n      BatchGetDocumentsRequest,\n      api.BatchGetDocumentsResponse\n    >('BatchGetDocuments', params).then(response => {\n      let docs = maybeDocumentMap();\n      response.forEach(proto => {\n        const doc = this.serializer.fromMaybeDocument(proto);\n        docs = docs.insert(doc.key, doc);\n      });\n      const result: MaybeDocument[] = [];\n      keys.forEach(key => {\n        const doc = docs.get(key);\n        assert(!!doc, 'Missing entity in write response for ' + key);\n        result.push(doc!);\n      });\n      return result;\n    });\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  private invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    // TODO(mikelehen): Retry (with backoff) on token failures?\n    return this.credentials.getToken(/*forceRefresh=*/ false).then(token => {\n      return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n    });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  private invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    // TODO(mikelehen): Retry (with backoff) on token failures?\n    return this.credentials.getToken(/*forceRefresh=*/ false).then(token => {\n      return this.connection.invokeStreamingRPC<Req, Resp>(\n        rpcName,\n        request,\n        token\n      );\n    });\n  }\n}\n"]}