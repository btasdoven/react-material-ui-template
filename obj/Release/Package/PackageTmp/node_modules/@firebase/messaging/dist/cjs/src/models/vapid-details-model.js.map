{"version":3,"sources":["../src/models/vapid-details-model.ts"],"names":[],"mappings":"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","file":"vapid-details-model.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\n\nconst FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nconst DB_NAME = 'fcm_vapid_details_db';\nconst DB_VERSION = 1;\nconst UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\n\nexport default class VapidDetailsModel extends DBInterface {\n  constructor() {\n    super(DB_NAME, DB_VERSION);\n  }\n\n  /**\n   * @override\n   * @param {IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the vapid key\n   * in indexedDB.\n   */\n  getVapidFromSWScope(swScope: string): Promise<Uint8Array> {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.openDatabase().then(db => {\n      return new Promise<Uint8Array>((resolve, reject) => {\n        const transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const scopeRequest = objectStore.get(swScope);\n        scopeRequest.onerror = () => {\n          reject(scopeRequest.error);\n        };\n\n        scopeRequest.onsuccess = () => {\n          let result = scopeRequest.result;\n          let vapidKey = null;\n          if (result) {\n            vapidKey = result.vapidKey;\n          }\n          resolve(vapidKey);\n        };\n      });\n    });\n  }\n\n  /**\n   * Save a vapid key against a swScope for later date.\n   */\n  saveVapidDetails(swScope: string, vapidKey: Uint8Array): Promise<void> {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n      );\n    }\n\n    const details = {\n      swScope: swScope,\n      vapidKey: vapidKey\n    };\n\n    return this.openDatabase().then(db => {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = db.transaction(\n          [FCM_VAPID_OBJ_STORE],\n          this.TRANSACTION_READ_WRITE\n        );\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const request = objectStore.put(details);\n        request.onerror = () => {\n          reject(request.error);\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      });\n    });\n  }\n\n  /**\n   * This method deletes details of the current FCM VAPID key for a SW scope.\n   * Resolves once the scope/vapid details have been deleted and returns the\n   * deleted vapid key.\n   */\n  deleteVapidDetails(swScope: string): Promise<Uint8Array> {\n    return this.getVapidFromSWScope(swScope).then(vapidKey => {\n      if (!vapidKey) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n      }\n\n      return this.openDatabase().then(db => {\n        return new Promise<Uint8Array>((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_VAPID_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          const request = objectStore.delete(swScope);\n          request.onerror = () => {\n            reject(request.error);\n          };\n          request.onsuccess = () => {\n            if (request.result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY)\n              );\n              return;\n            }\n\n            resolve(vapidKey);\n          };\n        });\n      });\n    });\n  }\n}\n"]}