{"version":3,"sources":["../src/models/iid-model.ts"],"names":[],"mappings":"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","file":"iid-model.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nimport { ErrorFactory, base64 } from '@firebase/util';\n\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nimport FCMDetails from './fcm-details';\n\nexport default class IIDModel {\n  private errorFactory_: ErrorFactory<string>;\n\n  constructor() {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n  }\n\n  /**\n   * Given a PushSubscription and messagingSenderId, get an FCM token.\n   * @public\n   * @param  {string} senderId The 'messagingSenderId' to tie the token to.\n   * @param  {PushSubscription} subscription The PushSusbcription to \"federate\".\n   * @param  {Uint8Array} publicVapidKey The public VAPID key.\n   * @return {Promise<!Object>} Returns the FCM token to be used in place\n   * of the PushSubscription.\n   */\n  getToken(senderId, subscription, publicVapidKey): Promise<Object> {\n    const p256dh = arrayBufferToBase64(subscription['getKey']('p256dh'));\n    const auth = arrayBufferToBase64(subscription['getKey']('auth'));\n\n    let fcmSubscribeBody =\n      `authorized_entity=${senderId}&` +\n      `endpoint=${subscription.endpoint}&` +\n      `encryption_key=${p256dh}&` +\n      `encryption_auth=${auth}`;\n\n    if (publicVapidKey !== FCMDetails.DEFAULT_PUBLIC_VAPID_KEY) {\n      const applicationPubKey = arrayBufferToBase64(publicVapidKey);\n      fcmSubscribeBody += `&application_pub_key=${applicationPubKey}`;\n    }\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const subscribeOptions = {\n      method: 'POST',\n      headers: headers,\n      body: fcmSubscribeBody\n    };\n\n    return fetch(\n      FCMDetails.ENDPOINT + '/fcm/connect/subscribe',\n      subscribeOptions\n    )\n      .then(response => response.json())\n      .catch(() => {\n        throw this.errorFactory_.create(Errors.codes.TOKEN_SUBSCRIBE_FAILED);\n      })\n      .then(response => {\n        const fcmTokenResponse = response;\n        if (fcmTokenResponse['error']) {\n          const message = fcmTokenResponse['error']['message'];\n          throw this.errorFactory_.create(Errors.codes.TOKEN_SUBSCRIBE_FAILED, {\n            message: message\n          });\n        }\n\n        if (!fcmTokenResponse['token']) {\n          throw this.errorFactory_.create(\n            Errors.codes.TOKEN_SUBSCRIBE_NO_TOKEN\n          );\n        }\n\n        if (!fcmTokenResponse['pushSet']) {\n          throw this.errorFactory_.create(\n            Errors.codes.TOKEN_SUBSCRIBE_NO_PUSH_SET\n          );\n        }\n\n        return {\n          token: fcmTokenResponse['token'],\n          pushSet: fcmTokenResponse['pushSet']\n        };\n      });\n  }\n\n  /**\n   * Update the underlying token details for fcmToken.\n   */\n  updateToken(\n    senderId: string,\n    fcmToken: string,\n    fcmPushSet: string,\n    subscription: PushSubscription,\n    publicVapidKey: Uint8Array\n  ): Promise<string> {\n    const p256dh = arrayBufferToBase64(subscription['getKey']('p256dh'));\n    const auth = arrayBufferToBase64(subscription['getKey']('auth'));\n\n    let fcmUpdateBody =\n      `push_set=${fcmPushSet}&` +\n      `token=${fcmToken}&` +\n      `authorized_entity=${senderId}&` +\n      `endpoint=${subscription.endpoint}&` +\n      `encryption_key=${p256dh}&` +\n      `encryption_auth=${auth}`;\n\n    if (publicVapidKey !== FCMDetails.DEFAULT_PUBLIC_VAPID_KEY) {\n      const applicationPubKey = arrayBufferToBase64(publicVapidKey);\n      fcmUpdateBody += `&application_pub_key=${applicationPubKey}`;\n    }\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const updateOptions = {\n      method: 'POST',\n      headers: headers,\n      body: fcmUpdateBody\n    };\n\n    let updateFetchRes;\n    return fetch(FCMDetails.ENDPOINT + '/fcm/connect/subscribe', updateOptions)\n      .then(fetchResponse => {\n        updateFetchRes = fetchResponse;\n        return fetchResponse.json();\n      })\n      .catch(() => {\n        throw this.errorFactory_.create(Errors.codes.TOKEN_UPDATE_FAILED);\n      })\n      .then(fcmTokenResponse => {\n        if (!updateFetchRes.ok) {\n          const message = fcmTokenResponse['error']['message'];\n          throw this.errorFactory_.create(Errors.codes.TOKEN_UPDATE_FAILED, {\n            message: message\n          });\n        }\n        if (!fcmTokenResponse['token']) {\n          throw this.errorFactory_.create(Errors.codes.TOKEN_UPDATE_NO_TOKEN);\n        }\n        return fcmTokenResponse['token'];\n      });\n  }\n\n  /**\n   * Given a fcmToken, pushSet and messagingSenderId, delete an FCM token.\n   */\n  deleteToken(\n    senderId: string,\n    fcmToken: string,\n    fcmPushSet: string\n  ): Promise<void> {\n    let fcmUnsubscribeBody =\n      `authorized_entity=${senderId}&` +\n      `token=${fcmToken}&` +\n      `pushSet=${fcmPushSet}`;\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const unsubscribeOptions = {\n      method: 'POST',\n      headers: headers,\n      body: fcmUnsubscribeBody\n    };\n\n    return fetch(\n      FCMDetails.ENDPOINT + '/fcm/connect/unsubscribe',\n      unsubscribeOptions\n    ).then(fetchResponse => {\n      if (!fetchResponse.ok) {\n        return fetchResponse.json().then(\n          fcmTokenResponse => {\n            if (fcmTokenResponse['error']) {\n              const message = fcmTokenResponse['error']['message'];\n              throw this.errorFactory_.create(\n                Errors.codes.TOKEN_UNSUBSCRIBE_FAILED,\n                {\n                  message: message\n                }\n              );\n            }\n          },\n          err => {\n            throw this.errorFactory_.create(\n              Errors.codes.TOKEN_UNSUBSCRIBE_FAILED\n            );\n          }\n        );\n      }\n    });\n  }\n}\n"]}